/*
Use case:
We have event driven application where many events can be generated by user activities.
For Example: clicking on buttons generate events, writing text in Textbox generates events.
For here, Assume : Button , TextBox is a component.
Componets are subscribed to listen to ceratin events and for some events they will not listen/subscribed
i.e Component1 can listen to event1,event3 but not event2
Component2 can listen to event3 only

So we will associate/map Events to one or more componenets in below code ( using map)
(i.e. Maintain a mapping of events to subscribers in the EventDistributor class)

When a event is received from the component, the EventDistributor sends a  message 
to every  component who has subscribed to that event.

The Receiver/subscriber/component accepts the event 

Here we have created button class and  TextBox class for simplicty and understanding.
2 button object and 1 textbox object is created.
*/

#include<iostream>
#include<vector>
#include<map>
#include<algorithm> //for find() in vector

using namespace std;

class Component
{
   public:
     //pure virtual function
     virtual void onEventReceived(string event) = 0;
     virtual string getComponentName()=0;

};

//This class maintains a vector to store the list of components subscribed
//It notifies the components present in vector that a event has arrived/occured
class EventDistributor
{
    map<Component *,vector<string>> subscribersList;
    public:
      //this methods helps the component to get subscribed to other components
      void subscribe(Component *component , string event)
      {
          // component is mapped to event , component : {event1,event2.....}
          subscribersList[component].push_back(event);
          
      }

      void notify(string event)
      { 
        //Sending the occurence of event to all componets mapped to this event

        cout<<"Event Received by Event Distributor: "<<event<<endl; 
       //iterate map  one by one for each key ( component)
       for(auto subscriberPair: subscribersList ) 
       {
           Component * component = subscriberPair.first; //get component

           //retrieve its mapped value i.e list of events
           vector<string> eventList = subscriberPair.second; 
           //iterate this eventlist to check the required event
           
             
           if(find(eventList.begin(),eventList.end(),event) != eventList.end()) //if event found ,go inside
           {
              
              cout<<"Event distributor is sending Notification to Component: "<< component->getComponentName()<<endl;
              component->onEventReceived(event);
              cout<<"Notification Sent.. Completed..."<<endl<<endl; 
           }
           else
           {
            cout<<component->getComponentName() <<" is NOT subscribed to the Event: "<<event<<endl;
            cout<<"..SO No NOTIfication is sent to  component "<< component->getComponentName()<<endl;
           }

       }      
               
      }

      
      void unSubscribe(Component *component , string event)
      {
          //unsubscribe the component for a event , i.e. now component will not listen to that event

          vector<string> &eventList = subscribersList[component];  //putting & is needed, else changes will not be reflected in main event List in map
          //first check if the component is subscribed for the asked event, then only we can perform unsubscribing
          auto eventItr = find(eventList.begin(), eventList.end(), event);
          if(eventItr!= eventList.end())
          {
             //remove this event entry for this component
             eventList.erase(eventItr);
          }
         //printMapping();
         
      }

      void printMapping()
      {
        
        map<Component * , vector<string>>::iterator  it ;
        for(it = subscribersList.begin(); it != subscribersList.end(); it++)
        {
           Component * component =  it->first;
           cout<<"Component Name ="<<component->getComponentName()<<": ";
           vector<string> eventList = it->second;
           cout<<"Event list: ";
           for(auto event :eventList)
           {
              cout<<event<<" ";
           }
           cout<<endl;
        }
      }
};

class Button: public Component
{
   string m_name;
   EventDistributor *m_distributor;
   public:
    //subscribe to the Eventdistributor
    Button(string component_name,EventDistributor * distributor,vector<string> eventList):m_name(component_name),m_distributor(distributor)
    {
        for(string event : eventList)
        {
            //complete object is sent, this component will subscribe for these events only present in eventList
            distributor->subscribe(this,event);  
            cout<<m_name <<"  is subscribed to Event Distributor for EVENT: "<<event<<endl;
        }
    }

    void unSubscribe()
    {
        m_distributor->unSubscribe(this,"ButtonClickedEvent");
        cout<<this->getComponentName() <<" is now UNSUBSCRIBED for event ButtonClicked"<<endl;
    }
    void onClick()
    {
         cout<<"Button "<<m_name<<" is clicked..."<<endl;
         //notify the subscriber? Where is subsciber list? In Eventdistributor
         //So calling notify of Eventdistributor

         // Simulate generating an event
         string event_name = "ButtonClickedEvent";

         //notify and sent the event also
         m_distributor->notify(event_name);
    }

    //implementing pure virtual function
    //This is called by Event Distributor when it get to know that some event is arrived
    //so Event Distributor tells to the subsribed component( if this componet is in list of 
    // event distributor)
    void onEventReceived(string event)
    {
        if(event == "ButtonClickedEvent")
        {
         //Handle the Event ...    
         cout<<m_name<<" Notified by Event distributor"<<endl;
         cout<<"Event = "<<event <<" Receieved"<<endl;   
        }
        else if(event == "event2")
        {
          //Handle the Event ...    
          cout<<m_name<<" Notified by Event distributor"<<endl;
          cout<<"Event = "<<event <<" Receieved"<<endl;   
        }
        else if(event == "event3")
        {
          //Handle the Event ...    
          cout<<m_name<<" Notified by Event distributor"<<endl;
          cout<<"Event = "<<event <<" Receieved"<<endl;   
        }
        else
           cout<<"The component is not subscribed for this event"<<endl;
    }
    

    string getComponentName()
    {
        return m_name;
    }
    
    
};

class TextBox: public Component
{
   string m_name;
   EventDistributor * m_distributor;
   public:
    //subscribe to the Eventdistributor
    TextBox(string component_name,EventDistributor * distributor,vector<string> eventList):m_name(component_name),m_distributor(distributor)
    {
        for(auto event:eventList)
        {
          distributor->subscribe(this,event);  //complete object is sent
          cout<<m_name <<"  is subscribed to Event Distributor for EVENT: "<<event<<endl;
        }
    }

    void unSubscribe()
    {
        m_distributor->unSubscribe(this,"TextEnteredEvent");
        cout<<this->getComponentName() <<" is now UNSUBSCRIBED for event ButtonClicked"<<endl;
    }
    void onTextEntered(string textEntered)
    {
         cout<<"Text enetered in Text Box "<<m_name<<" is : "<<textEntered<<endl;
         //notify the subscriber? Where is subsciber list? In Eventdistributor
         //So calling notify of Eventdistributor

         // Simulate generating an event
         string event_name = "TextEnteredEvent";
         
         //notify and sent the event also
         m_distributor->notify(event_name);
    }

    //implementing pure virtual function
    //This is called by Event Distributor when it get to know that some event is arrived
    //so Event Distributor tells to the subsribed component( if this componet is in list of 
    // event distributor)
    void onEventReceived(string event)
    {
        if(event == "TextEnteredEvent")
        {
         //Handle the Event ...   
         cout<<m_name<<" Notified by Event distributor"<<endl;
         cout<<"Event = "<<event <<" Receieved"<<endl; 
        } 
        else if(event == "TextLimitExceedEvent")
        {
          //Handle the Event ...   
          cout<<m_name<<" Notified by Event distributor"<<endl;
          cout<<"Event = "<<event <<" Receieved"<<endl; 
        }  
        else
           cout<<"The component is not subscribed for this event"<<endl;

    }

    string getComponentName()
    {
        return m_name;
    }
};

int main()
{
   EventDistributor distributor;

  //create componets and subscribe to event distributor
  //Here  distributor is passed by reference which is must, else  vector of subscribers
  // inside distributor object  will remain empty
   Button b1("button1",&distributor,{"ButtonClickedEvent","event2","event3"});
   Button b2("button2",&distributor,{"ButtonClickedEvent","event3"});
   TextBox t1 ("TextBox",&distributor,{"TextEnteredEvent","TextLimitExceedEvent"});

   b1.onClick();
   cout<<endl;
   b2.onClick();
   cout<<endl;
   t1.onTextEntered("Hello");

   b1.unSubscribe(); 
   distributor.printMapping();
   b1.onClick();

   return 0;   
  
}


