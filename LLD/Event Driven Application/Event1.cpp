/*
Use case:
We have event driven application where many events can be generated by user activities.
For Example: clicking on buttons generate events, writing text in Textbox generates events.
For here, Assume : Button , TextBox is a component.
All Components are subscribe to EventDistributor.
When a event is received from the component, the EventDistributor sends a broadcast message 
to every other component including itself.


Here we have created button class and  TextBox class for simplicty and understanding.
2 button object and 1 textbox object is created.
*/

#include<iostream>
#include<vector>

using namespace std;

class Component
{
   public:
     //pure virtual function
     virtual void onEventReceived(string event) = 0;

};

//This class maintains a vector to store the list of components subscribed
//It notifies the components present in vector that a event has arrived/occured
class EventDistributor
{
    vector<Component *> subscribersList;
    public:
      //this methods helps the component to get subscribed to other components
      void subscribe(Component *component )
      {
          // component is added to subscriber list
          subscribersList.push_back(component);
      }

      void notify(string event)
      { 
        //Broadcasting the occurence of event to all componets listed in vector
        for(Component * subscriber : subscribersList)
              subscriber->onEventReceived(event);

      }
};

class Button: public Component
{
   string m_name;
   public:
    //subscribe to the Eventdistributor
    Button(string component_name,EventDistributor * distributor)
    {
        m_name=component_name;
        distributor->subscribe(this);  //complete object is sent
        cout<<m_name <<"  is subscribed to Event Distributor "<<endl;
    }

    void onClick(EventDistributor  distributor)
    {
         cout<<"Button "<<m_name<<" is clicked..."<<endl;
         //notify the subscriber? Where is subsciber list? In Eventdistributor
         //So calling notify of Eventdistributor

         // Simulate generating an event
         string event_name = "Button Clicked";

         //notify and sent the event also
         distributor.notify(event_name);
    }

    //implementing pure virtual function
    //This is called by Event Distributor when it get to know that some event is arrived
    //so Event Distributor tells to the subsribed component( if this componet is in list of 
    // event distributor)
    void onEventReceived(string event)
    {
        
         //Handle the Event ...    
         cout<<m_name<<" Notified by Event distributor"<<endl;
         cout<<"Event = "<<event <<" Receieved"<<endl;   
        
    }

    
};

class TextBox: public Component
{
   string m_name;
   public:
    //subscribe to the Eventdistributor
    TextBox(string component_name,EventDistributor * distributor):m_name(component_name)
    {
        
        distributor->subscribe(this);  //complete object is sent
        cout<<m_name <<"  is subscribed to Event Distributor "<<endl;
    }

    void onTextEntered(EventDistributor  distributor,string textEntered)
    {
         cout<<"Text enetered in Text Box "<<m_name<<" is : "<<textEntered<<endl;
         //notify the subscriber? Where is subsciber list? In Eventdistributor
         //So calling notify of Eventdistributor

         //Simulate generating an event
         string event_name = "TextAreaEntered";
         
         //notify and sent the event also
         distributor.notify(event_name);
    }

    //implementing pure virtual function
    //This is called by Event Distributor when it get to know that some event is arrived
    //so Event Distributor tells to the subsribed component( if this componet is in list of 
    // event distributor)
    void onEventReceived(string event)
    {
         //Handle the Event ...   
         cout<<m_name<<" Notified by Event distributor"<<endl;
         cout<<"Event = "<<event <<" Receieved"<<endl; 
        

    }

    
};

int main()
{
   EventDistributor distributor;

  //create componets and subscribe to event distributor
  //Here  distributor is passed by refernce which is must, else  vector of subscribers
  // inside distributor object  will remain empty
   Button b1("button1",&distributor);
   Button b2("button2",&distributor);
   TextBox t1 ("TextBox",&distributor);

   b1.onClick(distributor);
   cout<<endl;
   b2.onClick(distributor);
   cout<<endl;
   t1.onTextEntered(distributor,"Hello");
   return 0;   
  
}


